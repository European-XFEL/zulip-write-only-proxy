[tool.poetry]
name = "zulip-write-only-proxy"
version = "0.0.0"
description = ""
authors = ["Robert Rosca"]
readme = "README.md"
packages = [{ include = "zulip_write_only_proxy", from = "src" }]

[tool.poetry.scripts]
damnit-zulip = "zulip_write_only_proxy.cli:app"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
fastapi = "^0.104"
uvicorn = "^0.23.1"
zulip = "^0.8.2"
python-multipart = "^0.0.6"
orjson = "^3.9.2"
pydantic = "^2.4.2"
typer = "^0.9.0"
pydantic-settings = "^2.4.0"
authlib = "^1.3.0"
itsdangerous = "^2.1.2"
structlog = "^24.1.0"
sentry-sdk = "^1.40.3"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
httpx = "^0.24.1"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.21.1"
commitizen = "^3.6.0"
types-colorama = "^0.4.15.20240205"
rich = "^13.7.0"

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.0"
mypy = "^1.4.1"
pyright = "^1.1.320"
black = "^23.7.0"

[tool.black]
line-length = 88
target-version = ["py311", "py312"]

[tool.ruff]
line-length = 88
select = [
  "E",     # pycodestyle
  "F",     # flake8
  "I",     # isort
  "PGH",   # pygrep-hooks
  "RUF",   # ruff
  "W",     # pycodestyle
  "UP",    # pyupgrade
  "C90",   # mccabe complexity
  "N",     # pep8 naming
  "PERF",  # perflint
  "FURB",  # refurb
  "B",     # flake8-bugbear
  "C4",    # flake8-comprehensions
  "YTT",   # flake8-2020
  "SIM",   # flake8-simplify
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "DTZ",   # flake8-datetime
  "EM",    # flake8-errmsg
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "ICN",   # flake8-import-conventions
  "G",     # flake8-logging-format
  "PIE",   # flake8-pie
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "TCH",   # flake8-type-checking
  "PTH",   # flake8-use-pathlib
  "LOG",   # flake8-logging
]
extend-ignore = ["B018", "B019"]
src = ["src"]
target-version = "py311"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["zulip_write_only_proxy"]

[tool.poe.tasks]
update-static = [
  { cwd = "./src/zulip_write_only_proxy/frontend", cmd = "cp ./node_modules/htmx.org/dist/htmx.min.js ./static/htmx.min.js" },
  { cwd = "./src/zulip_write_only_proxy/frontend", cmd = "pnpx tailwindcss -i ./input.css -o ./static/main.css" },
]

serve = { cmd = "python3 -m zulip_write_only_proxy.main" }
dev = ["update-static", "serve --reload"]
prod = ["serve --host 0.0.0.0"]

test = "python3 -m pytest --cov=zulip_write_only_proxy --cov-report=term-missing --cov-report xml --cov-branch"

lint = ["ruff", "black --check", "mypy", "pyright"]
format = ["ruff --fix", "black"]
ruff = "ruff check ./src ./tests"
black = "black ./src ./tests"
mypy = "mypy ./src ./tests"
pyright = "pyright ./src ./tests"

[tool.coverage.run]
# Exclude CLI from coverage as it is not really required anymore
omit = ["src/zulip_write_only_proxy/cli.py"]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[tool.poetry-dynamic-versioning]
enable = true
dirty = true
style = "semver"

[tool.poetry-dynamic-versioning.substitution]
folders = [{ path = "src" }]

[tool.poetry-dynamic-versioning.files."src/zulip_write_only_proxy/_version.py"]
persistent-substitution = true
initial-content = """
  # These version placeholders will be replaced later during substitution.
  __version__ = "0.0.0"
  __version_tuple__ = (0, 0, 0)
"""

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
